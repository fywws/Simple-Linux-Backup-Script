#!/bin/bash

# Launch: sudo ./backup.sh create -o restore.sh

VERSION="1.1.0"
OUTPUT_FILE="restore-system.sh"
ACTION=""
EXTRA_OPTS=()

show_help() {
    cat << 'EOF'
sysbackup — utility for creating system package backups on Linux

Usage:
    backup.sh [CMD] [ARGS]

CMD:
    create                    create restore script
    help                      show this help menu
    version                   show version

ARGS:
    -o, --output FILE         Output file name (default: restore-system.sh)
    --no-configs              Skip configuration files
    --no-users                Skip user accounts
    --no-flatpak              Do not backup/restore flatpak
    --no-snap                 Do not backup/restore snap
    --only-packages           Only main packages (ignores configs, users, flatpak, snap)

Examples:
    sudo ./backup.sh create -o myrestore.sh
    sudo ./backup.sh create --no-snap -o no-snap.sh
    sudo ./backup.sh create --only-packages -o minimal.sh
EOF
}

# Function: error
error() {
    echo "❌ Error: $*" >&2
    exit 1
}

# Function: log
log() {
    echo "🔹 $*"
}

# Temporary directory
TMP_DIR="/tmp/sysbackup.$RANDOM"
mkdir -p "$TMP_DIR"
trap 'rm -rf "$TMP_DIR"' EXIT

# === Generate restore script ===
generate_restore_script() {
    local output_file="$1"
    local include_configs=true
    local include_users=true
    local include_flatpak=true
    local include_snap=true
    local only_packages=false

    shift  # Remove output_file

    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --no-configs)
                include_configs=false
                shift
                ;;
            --no-users)
                include_users=false
                shift
                ;;
            --no-flatpak)
                include_flatpak=false
                shift
                ;;
            --no-snap)
                include_snap=false
                shift
                ;;
            --only-packages)
                only_packages=true
                include_configs=false
                include_users=false
                include_flatpak=false
                include_snap=false
                shift
                ;;
            *)
                error "Unknown argument: $1"
                ;;
        esac
    done

    log "Generating script: $output_file"

    cat > "$output_file" << 'EOF'
#!/bin/bash
# System restore script (generated by sysbackup)
echo "🚀 Starting system restoration..."
set -euo pipefail
EOF

    # === Detect package manager ===
    if command -v apt >/dev/null 2>&1 && command -v dpkg >/dev/null 2>&1; then
        log "Saving: apt (Debian/Ubuntu)"
        dpkg --get-selections | grep -v deinstall | awk '{print $1}' > "$TMP_DIR/packages.txt"
        echo "echo '📦 Installing system packages via apt...'" >> "$output_file"
        echo "apt update" >> "$output_file"
        echo "cat > /tmp/sysbackup-packages.txt << 'EOF_PACKAGES'" >> "$output_file"
        cat "$TMP_DIR/packages.txt" >> "$output_file"
        echo "EOF_PACKAGES" >> "$output_file"
        echo "xargs apt install -y < /tmp/sysbackup-packages.txt" >> "$output_file"

    elif command -v pacman >/dev/null 2>&1; then
        log "Saving: pacman (Arch)"
        pacman -Qqe > "$TMP_DIR/packages.txt"
        echo "echo '📦 Installing packages via pacman...'" >> "$output_file"
        echo "cat > /tmp/sysbackup-packages.txt << 'EOF_PACKAGES'" >> "$output_file"
        cat "$TMP_DIR/packages.txt" >> "$output_file"
        echo "EOF_PACKAGES" >> "$output_file"
        echo "pacman -Syu --noconfirm" >> "$output_file"
        echo "pacman -S --noconfirm \$(cat /tmp/sysbackup-packages.txt)" >> "$output_file"

    elif command -v dnf >/dev/null 2>&1; then
        log "Saving: dnf (Fedora)"
        dnf list installed | awk 'NR>1 {print $1}' | sed 's/\..*$//' > "$TMP_DIR/packages.txt"
        echo "echo '📦 Installing packages via dnf...'" >> "$output_file"
        echo "cat > /tmp/sysbackup-packages.txt << 'EOF_PACKAGES'" >> "$output_file"
        cat "$TMP_DIR/packages.txt" >> "$output_file"
        echo "EOF_PACKAGES" >> "$output_file"
        echo "dnf install -y \$(cat /tmp/sysbackup-packages.txt)" >> "$output_file"

    else
        error "No supported package manager found (apt, dnf, pacman)"
    fi

    # === Flatpak ===
    if [[ "$include_flatpak" == true && "$only_packages" == false ]]; then
        if command -v flatpak >/dev/null 2>&1; then
            log "Saving: flatpak applications"
            # Get only user applications (not system)
            flatpak list --app --columns=application | grep -v "^Application" > "$TMP_DIR/flatpaks.txt"
            if [[ -s "$TMP_DIR/flatpaks.txt" ]]; then
                echo "" >> "$output_file"
                echo "echo '📦 Installing flatpak applications...'" >> "$output_file"
                echo "if command -v flatpak >/dev/null; then" >> "$output_file"
                echo "    cat > /tmp/sysbackup-flatpaks.txt << 'EOF_FLATPAK'" >> "$output_file"
                cat "$TMP_DIR/flatpaks.txt" >> "$output_file"
                echo "EOF_FLATPAK" >> "$output_file"
                echo "    while IFS= read -r app; do" >> "$output_file"
                echo "        flatpak install -y --noninteractive \"\$app\" || echo \"⚠️ Failed to install \$app\"" >> "$output_file"
                echo "    done < /tmp/sysbackup-flatpaks.txt" >> "$output_file"
                echo "else" >> "$output_file"
                echo "    echo '⚠️ flatpak not installed. Skipping...'" >> "$output_file"
                echo "fi" >> "$output_file"
            fi
        else
            log "🟡 flatpak not installed — skipping"
        fi
    fi

    # === Snap ===
    if [[ "$include_snap" == true && "$only_packages" == false ]]; then
        if command -v snap >/dev/null 2>&1; then
            log "Saving: snap applications"
            # Get only installed packages (skip header)
            snap list | awk 'NR>1 && $1 != "Name" {print $1}' > "$TMP_DIR/snaps.txt"
            if [[ -s "$TMP_DIR/snaps.txt" ]]; then
                echo "" >> "$output_file"
                echo "echo '📦 Installing snap packages...'" >> "$output_file"
                echo "if command -v snap >/dev/null; then" >> "$output_file"
                echo "    cat > /tmp/sysbackup-snaps.txt << 'EOF_SNAP'" >> "$output_file"
                cat "$TMP_DIR/snaps.txt" >> "$output_file"
                echo "EOF_SNAP" >> "$output_file"
                echo "    while IFS= read -r pkg; do" >> "$output_file"
                echo "        snap install \"\$pkg\" || echo \"⚠️ Failed to install \$pkg\"" >> "$output_file"
                echo "    done < /tmp/sysbackup-snaps.txt" >> "$output_file"
                echo "else" >> "$output_file"
                echo "    echo '⚠️ snap not installed. Skipping...'" >> "$output_file"
                echo "fi" >> "$output_file"
            fi
        else
            log "🟡 snap not installed — skipping"
        fi
    fi

    # === Configs ===
    if [[ "$include_configs" == true && "$only_packages" == false ]]; then
        log "Adding configuration files"
        cat >> "$output_file" << 'EOF'

echo "🔧 Restoring configuration files..."
EOF
        for conf in /etc/hostname /etc/hosts /etc/fstab /etc/default/grub; do
            if [[ -f "$conf" ]]; then
                id=$(echo "$conf" | tr -d '/')
                echo "cat > \"$conf\" << 'EOF_CONF$id'" >> "$output_file"
                cat "$conf" >> "$output_file"
                echo "EOF_CONF$id" >> "$output_file"
            fi
        done
    fi

    # === Users ===
    if [[ "$include_users" == true && "$only_packages" == false ]]; then
        log "Adding users"
        getent passwd | awk -F: '$3>=1000 && $3<65534 {print $1}' > "$TMP_DIR/users.txt"
        echo "" >> "$output_file"
        echo "echo '👥 Restoring users...'" >> "$output_file"
        echo "cat > /tmp/sysbackup-users.txt << 'EOF_USERS'" >> "$output_file"
        cat "$TMP_DIR/users.txt" >> "$output_file"
        echo "EOF_USERS" >> "$output_file"
        echo "while IFS= read -r user; do" >> "$output_file"
        echo "    id \"\$user\" &>/dev/null || useradd -m \"\$user\"" >> "$output_file"
        echo "done < /tmp/sysbackup-users.txt" >> "$output_file"
    fi

    # === Finalization ===
    cat >> "$output_file" << 'EOF'
echo "✅ System restored!"
rm -f /tmp/sysbackup-packages.txt /tmp/sysbackup-users.txt /tmp/sysbackup-flatpaks.txt /tmp/sysbackup-snaps.txt
EOF

    chmod +x "$output_file"
    log "Done: $output_file"
}

# === Argument parsing ===
while [[ $# -gt 0 ]]; do
    case $1 in
        create)
            ACTION="create"
            shift
            ;;
        help|--help|-h)
            show_help
            exit 0
            ;;
        version|--version)
            echo "sysbackup $VERSION"
            exit 0
            ;;
        -o|--output)
            [[ -n "$2" ]] || error "Expected filename after $1"
            OUTPUT_FILE="$2"
            shift 2
            ;;
        --no-configs|--no-users|--no-flatpak|--no-snap|--only-packages)
            EXTRA_OPTS+=("$1")
            shift
            ;;
        -*)
            error "Unknown flag: $1"
            ;;
        *)
            error "Unknown argument: $1"
            ;;
    esac
done

# === Execution ===
if [[ -z "$ACTION" ]]; then
    error "No command specified. Use: create"
fi

case $ACTION in
    create)
        [[ $EUID -eq 0 ]] || error "Root privileges required"
        generate_restore_script "$OUTPUT_FILE" "${EXTRA_OPTS[@]}"
        ;;
    *)
        error "Unknown command: $ACTION"
        ;;
esac